// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  subscribed        Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  account       Account[]
  sessions      Session[]
  folders       Folder[]
  documents     Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id             Int        @id @default(autoincrement())
  name           String
  parentFolderId Int?
  parentFolder   Folder?    @relation("FolderToFolder", fields: [parentFolderId], references: [id])
  childFolders   Folder[]   @relation("FolderToFolder")
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  documents      Document[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
}

model Document {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  folderId  Int?
  folder    Folder?  @relation(fields: [folderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
